#                           TESSEROIDS v 1.0
#                           
#                   Copyright 2011 Leonardo Uieda
#
#  Tesseroids is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
# 
#  Tesseroids is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
# 
#  You should have received a copy of the GNU General Public License
#  along with Tesseroids.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################


Tesseroids is a software package for the direct modeling of gravitational fields
in spherical coordinates. It can model the gravitational acceleration and gradient
tensor. The geometric element used in the modelling processes is a spherical prism,
also called a tesseroid.

Tesseroids is coded in the C programming language, making it portable to GNU/Linux
and Windows systems. Compilation under MacOS should be possible but has never been
tried.

This software is developed by Leonardo Uieda in cooperation with Carla Braitenberg.


INSTALLATION

Pre-compiled binary:

If you downloaded a pre-compiled binary distribution, simply unpack in the desired
directory. The executables will be in the "bin" folder and the HTML and PDF documentation
in the "doc" folder. To view the HTML docs open "index.html" from the "html" folder
in a web browser.

From souce:

Tesseroids uses the build tool SCons. A SConstruct file (Makefile equivalent) is used
to define the compilation rules. You will have to download and install SCons in order
to easily compile Tesseroids. SCons is available for both GNU/Linux and Windows and
building should work the same on both platforms. SCons requires that you have Python
installed. Check the SCons website for more information. Python is usually installed by
default on most GNU/Linux systems. Under Windows you will have to put SCons on your PATH
environment variable in order to use it from the command line. It is usually located in
the Scripts directory of your Python installation.
On GNU/Linux SCons will use the GCC compiler to compile sources. On Windows it will search
for an existing compiler. We recomment that you install GCC on Windows using MinGW.
To compile, type in a terminal (cmd.exe on Windows):

    scons

The executables will be placed on a "bin" folder.


USAGE

A note about heights and units:

In order to have a single convention, the word "height" means "height above the
Earths surface" and are interpreted as positive up and negative down, ie. oriented
with the z axis of the Local coordinate system.
Also, all input units are in SI and decimal degrees. Output of tessg* programs are
in mGal and Eotvos. All other output is also in SI and decimal degrees.

Getting help information:

All programs accept the -h and --version flags. -h will print a help message describing
the usage, input and output formats and options accepted. --verbose prints version and
license information about the program.

Computing the gravitational effect of a tesseroid:

The tessgx, tessgy, tessgz, tessgxx, etc. programs calculate the combined effect of
a list of tesseroids on given computation points. The computation points are passed
via standard input and do NOT have to be in a regular grid. This allows, for example,
computation on points where data was measured. The values calulated are put in the
last column of the input points and printed to standard output.
For example, if calculating  on these points:

    lon1 lat1 height1 value1 othervalue1
    lon2 lat2 height2 value2 othervalue2
    ...
    lonN latN heightN valueN othervalueN
    the output would look something like:

    lon1 lat1 height1 value1 othervalue1 gz1
    lon2 lat2 height2 value2 othervalue2 gz2
    ...
    lonN latN heightN valueN othervalueN gzN
    
The input model file should contain one tesseroid per line and have columns formated
as:

    W E S N HEIGHT_OF_TOP HEIGHT_OF_BOTTOM DENSITY
    
HEIGHT_OF_TOP and HEIGHT_OF_BOTTOM are positive if the above the Earth's surface and
negavitive if bellow. Remember that HEIGHT_OF_TOP > HEIGHT_OF_BOTTOM!
Use the command line option -h to view a list of all commands available.

Example:

Calculate the field of a tesseroid model having verbose printed and logged to file
"gz.log" and GLQ order 3/3/3.

    tessgz modelfile.txt -v -lgz.log -o3/3/3 < points.txt > gz_data.txt
    
The -a flag:

The -a flag on tessg* programs enables the automatic re-sizing of tesseroids when
it is needed to maintain the GLQ precision desired. As a general rule, the tesseroid
should be no bigger than it's distance from the computation point. Using this flag
breaks the tesseroids automatically when this criterion is breached. This means that
the computations can be performed with order 2/2/2 (default) which is much faster and
still maintain correctness. Some preliminary tests show that using the -a flag with
order 2/2/2 is up to 5 times faster than increasing the GLQ order. It is strongly
recommended using this flag and 2/2/2 order always!

Verbose and logging to files:

The -v flag enables printing of information messages to stderr. If ommited, only
error messages will appear. The -l flag enables logging of information and error
messages to a file.

Comments and provenance information:

Comments can be inserted into input files by placing a "#" character at the start
of a line. All comment lines are ignored. tessg* programs print the comment lines
of the input to standard output.
All programs insert comments about the provenance of their results (where they came
from) to their output. These include names of input files, version of program used,
date, etc.

Generating a regular grid:

Included in the package is program "tessgrd" which creates a regular grid of points
and prints them to standard output.
Example:

    tessgrd -r-10/10/-10/10 -b100/100 -z250e03 -v > points.txt

    
Automated model generation:

Tesseroids 1.0 includes a new program called "tessmodgen" for automatically generating
a tesseroid model from a map of an interface. The interface can be any surface deviating
from a reference level. For example, topography (a DEM) deviates from 0, a Moho map
deviates from a mean crustal thickness, etc.
This program takes as input a REGULAR grid with longitude, latitude and height values
of the interface. Each tesseroid is generated with a grid point at the center of it's
top face. The top and bottom faces of the tesseroid are defined as:

    * Top = Interface and Bottom = Reference: if the interface is above the reference
    * Top = Reference and Bottom = Interface: if the interface is bellow the reference
    
The density RHO of the tesseroids can be passed using the -d option. This will asign a
density value of RHO when the interface is above the reference and a value of -RHO if
the interface is bellow the reference.
Alternatively, the density of each tesseroid can be passed as a forth column on the input
grid. As with the -d option, if the interface is bellow the reference, the density value
will be multiplied by -1! Also, an error will occur if both a forth column and the -d
option are passed!

Example:
To generate a tesseroid model from a Digital Elevation Model (DEM) with  resolution
using a density :

    tessmodgen -s1/1 -d2670 -z0 -v < dem_file.txt > dem_tess_model.txt


Calculating the total mass of a model:

The tessmass program can be used to compute the total mass of a given tesseroid model.
If desired, a density range can be given and only tesseroids that fall within the given
range will be used in the calculation.

Example:
To calculate the total mass of all tesseroids in "model.txt" with density between 0
and 1 g.cm^-3 :

    tessmass -r0/1000 < model.txt

    
Computing the gravitational effect of a rectangular prism:

Tesseroids 1.0 also introduces programs to calculate the gravitational effect of
rectangular prisms in Cartesian coordinates. This is done using the formulas of
Nagy et al. (2000). The programs are name prismgx, prismgy, prismgz, prismgxx, etc.
Input and output for these programs is very similar to that of the tessg* programs.
Computation points are read from standard input and the prism model is read from a
file. The model file should have the column format:

    X1 X2 Y1 Y2 Z1 Z2 DENSITY
    
A note on the coordinate system:

As in Nagy et al. (2000), the coordinate system for the rectangular prism calculations
has X axis pointing North, Y axis pointing East and Z axis pointing Down. This is
important to note because it differs from the convention adopted for the tesseroids.
In practice, this means that the  and  components of the prism and tesseroid will have
different signs. This will not be such for the  component, though, because the convention
for tesseroids is to have Z axis Down for this component only. See the Theoretical background
section of the User Manual for more details on this.

Piping:

Tesseroids was designed with the Unix filosophy in mind:

    Write programs that do one thing and do it well.
    Write programs to work together.
    Write programs to handle text streams, because that is a universal interface.
    
Therefore, all tessg* and tessgrd programs can be piped together to calculate many
components on a regular grid.

Example:
Given a tesseroids file "model.txt" as follows:

    -5 5 -5 5 0 -10e03 -500

Running the following would calculate  and gradient tensor of tesseroids in "model.txt"
of a regular grid from -10W to 10E and -10S to 10N on 100x100 points at 250 km height.
And the best of all is that it is done in parallel! If your system has multiple cores
this would mean a great increase in the computation time.

    tessgrd -r-10/10/-10/10 -b100/100 -z250e03 | tessgz model.txt -a | \
    tessgxx model.txt -a | tessgxy model.txt -a | tessgxz model.txt -a | \
    tessgyy model.txt -a | tessgyz model.txt -a | tessgzz model.txt -a > output.txt